name: CI/CD github Actions & Docker

on:
  push:
    branches: [ "main", "develop" ]

permissions:
  contents: read

jobs:
  CI-CD:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      ## gradle caching (빌드 시간 줄이기)
      - name: Gradle Caching
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-


      # yml 파일 생성 - aws
      - name: make application-aws.yml
        run: |
          cd ./src/main/resources
          touch ./application-aws.yml
          echo "${{ secrets.AWS_YML }}" > ./application-aws.yml
        shell: bash

      # yml 파일 생성 - mysql
      - name: make application-mysql.yml
        run: |
          cd ./src/main/resources
          touch ./application-mysql.yml
          echo "${{ secrets.MYSQL_YML }}" > ./application-mysql.yml
        shell: bash

      # yml 파일 생성 - swagger
      - name: make application-swagger.yml
        run: |
          cd ./src/main/resources
          touch ./application-swagger.yml
          echo "${{ secrets.SWAGGER_YML }}" > ./application-swagger.yml
        shell: bash

      # gradle chmod
      - name: Grant execute permission for gradlew
        run: chmod +x ./gradlew

      # gradle build
      - name: Build with Gradle
        run: ./gradlew clean build -x test

      # docker login
      - name: Docker Hub Login
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # docker build & push to production
      - name: Docker build & push
        run: |
          docker build -f Dockerfile -t ${{ secrets.DOCKER_USERNAME }}/${{ secrets.DOCKER_REPO }} .
          docker push ${{ secrets.DOCKER_USERNAME }}/${{ secrets.DOCKER_REPO }}


      ## deploy on server
      - name: Deploy on server
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.HOST_ADDR }} # AWS 퍼블릭 IPv4
          username: ubuntu
          key: ${{ secrets.PRIVATE_KEY }}
          envs: GITHUB_SHA
          script: |
            sudo docker ps
            sudo docker rm -f $(docker ps -qa)
            sudo docker pull ${{ secrets.DOCKER_USERNAME }}/${{ secrets.DOCKER_REPO }}
            sudo docker run -d -p 8080:8080 ${{ secrets.DOCKER_USERNAME }}/${{ secrets.DOCKER_REPO }}
            sudo docker image prune -f
